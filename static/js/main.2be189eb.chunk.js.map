{"version":3,"sources":["molecules/Form.tsx","organisms/LineChart.tsx","organisms/Chart.tsx","pages/App.tsx","index.tsx"],"names":["countryList","country","shortcut","Form","setDate","dateRef","useRef","countryRef","today","Date","month","getMonth","onSubmit","e","preventDefault","current","value","date","handleSubmit","htmlFor","ref","type","name","id","defaultValue","getFullYear","map","selected","LinearChart","chartDate","useState","dat","setDat","console","log","useEffect","ResponsiveContainer","width","height","LineChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","Label","offset","position","YAxis","Tooltip","Legend","Line","stroke","covidApi","year","split","nextYear","parseInt","monthPlusOne","monthUnderTen","nextMonth","fetchData","endpoint","a","fetch","then","response","json","result","Chart","React","setChartDate","dane","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2be189eb.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\n\r\nconst countryList = [\r\n  { country: 'Poland', shortcut: 'POL' },\r\n  { country: 'Germany', shortcut: 'DEU' },\r\n  { country: 'France', shortcut: 'FRA' },\r\n];\r\n\r\nconst Form = ({ setDate }: any) => {\r\n  const dateRef = useRef<HTMLInputElement>(null);\r\n  const countryRef = useRef<HTMLSelectElement>(null);\r\n\r\n  const today = new Date();\r\n  const month =\r\n    today.getMonth() + 1 < 10\r\n      ? `0${today.getMonth() + 1}`\r\n      : `${today.getMonth() + 1}`;\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setDate({\r\n      country: countryRef.current?.value,\r\n      date: dateRef.current?.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <label htmlFor=\"date\">\r\n        Choose date:\r\n        <input\r\n          ref={dateRef}\r\n          type=\"month\"\r\n          name=\"date\"\r\n          id=\"date\"\r\n          defaultValue={`${today.getFullYear()}-${month}`}\r\n          // value={`${today.getFullYear()}-${month}`}\r\n        />\r\n      </label>\r\n      <label htmlFor=\"country\">\r\n        Choose country:\r\n        <select ref={countryRef} name=\"country\" id=\"country\">\r\n          {countryList.map(({ shortcut, country }) => (\r\n            <option\r\n              key={country}\r\n              value={shortcut}\r\n              selected={country === 'Poland'}\r\n            >\r\n              {country}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Label,\r\n} from 'recharts';\r\n\r\nfunction LinearChart({ chartDate }: any) {\r\n  const [dat, setDat] = useState(chartDate);\r\n  console.log('chart', chartDate);\r\n  useEffect(() => {\r\n    setDat(chartDate);\r\n  }, [chartDate]);\r\n  return (\r\n    <ResponsiveContainer width=\"80%\" height={700}>\r\n      <LineChart\r\n        width={730}\r\n        height={250}\r\n        data={dat}\r\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"date\">\r\n          <Label value=\"Date\" offset={-20} position=\"insideBottomRight\" />\r\n        </XAxis>\r\n        <YAxis>\r\n          <Label value=\"Amount of ppl\" offset={20} position=\"insideTopLeft\" />\r\n        </YAxis>\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"confirmed\" stroke=\"#8884d8\" />\r\n        <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#82ca9d\" />\r\n        <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#ffc658\" />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}\r\n\r\nexport default LinearChart;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport LinearChart from './LineChart';\r\n\r\nconst covidApi = (date: { country: string; date: string }) => {\r\n  const { country } = date;\r\n  const year = date.date.split('-')[0];\r\n  const month = date.date.split('-')[1];\r\n  const nextYear = `${\r\n    parseInt(month, 10) === 12\r\n      ? parseInt(date.date.split('-')[0], 10) + 1\r\n      : year\r\n  }`;\r\n  const monthPlusOne = `${parseInt(date.date.split('-')[1], 10) + 1}`;\r\n  const monthUnderTen =\r\n    parseInt(monthPlusOne, 10) < 10 ? `0${monthPlusOne}` : monthPlusOne;\r\n  const nextMonth = `${monthUnderTen === '13' ? '01' : monthUnderTen}`;\r\n  return `https://covidapi.info/api/v1/country/${country}/timeseries/${year}-${month}-01/${nextYear}-${nextMonth}-01`;\r\n};\r\n\r\ntype chartDataInterface = {\r\n  confirmed: number;\r\n  date: string;\r\n  deaths: number;\r\n  recovered: number;\r\n};\r\nconst fetchData = async (\r\n  endpoint: string\r\n): Promise<{ result: chartDataInterface[] }> => {\r\n  const result = await fetch(endpoint).then((response) => {\r\n    return response.json();\r\n  });\r\n  return result;\r\n};\r\nconst Chart: React.FunctionComponent<any> = ({ date }) => {\r\n  const [chartDate, setChartDate] = React.useState<chartDataInterface[]>();\r\n  useEffect(() => {\r\n    (async () => {\r\n      const dane = await fetchData(covidApi(date));\r\n      setChartDate(dane.result);\r\n    })();\r\n  }, [date]);\r\n  return (\r\n    <>\r\n      <p>{date.country}</p>\r\n      <LinearChart chartDate={chartDate} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport Form from '../molecules/Form';\nimport Chart from '../organisms/Chart';\n\nconst App: React.FC = () => {\n  const [date, setDate] = React.useState<{ country: string; date: string }>({\n    country: '',\n    date: '',\n  });\n\n  return (\n    <>\n      <Form setDate={setDate} />\n      <Chart date={date} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}